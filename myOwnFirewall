#!/bin/bash

# myOwnFirewall v0.1		
#
# Author: Rolando Caldas	
# http://rolandocaldas.com	
# 
# https://github.com/rolando-caldas/myOwnFirewall

#################################################################
#SCRIPT MODIFICADO POR perraka DE MULTICS.ES Y EDITADO POR PIFO #
#ULTIMA EDICION 26-05-2021						 #
#################################################################

########IMPORTANTE##############


IPT=/sbin/iptables

ETH="+" ##ATENCION AQUI VA EL NOMBRE DE VUESTRA TARJETA DE RED. E.j: "eth0"

MCS_P="+" # AQUI LOS PUERTOS QUE USA LA MULTICS. E.j: 8000:8010

MCS_W="+" # AQUI LOS PUERTOS QUE USA LA MULTICS WEB

MCS_C="+" # AQUI LOS PUERTOS QUE USA LA MULTICS PARA CCCAM MGCAM O CUALQUIER OTRO PROTOCOLO QUE USEN. E.j: 4000,12001,18003,....

CACHE="+"  # AQUI LOS PUERTOS QUE USA LA MULTICS PARA CACHE

SSH="+" # AQUI TU PUERTO SSH

########################################################################################################################

##AQUI BANEAMOS LAS IPS DE LAS RATILLAS. Abrimos Putty Comando: "/etc/myOwnFirewall/myOwnFirewall ban la_ip_a_banear" ##

########################################################################################################################


################### Rutas ###################


BANNED_IPS="/etc/myOwnFirewall/banList"
LOCK="/etc/myOwnFirewall/.lock"
TEMP="/etc/myOwnFirewall/banned_tmp"


################### BANIPS & BANPORTS ###################


function banIP {
	if [ -f ${LOCK} ]
	then
		if [ $# -eq 0 ]
		then
			echo "You must enter an ip address"
		else
			ip=$1
			exists=false
			for i in `cat $BANNED_IPS`; do
				if [ $i = $ip ]
				then
					exists=true
				fi
			done

			if [ $exists = false ]
			then
				echo $ip >> $BANNED_IPS
				iptables -I INPUT -s $ip -j DROP
				iptables -I OUTPUT -s $ip -j DROP
				echo "IP ${ip} banned"
			else
				echo "IP ${ip} already in the list"
			fi
		fi
	else
                echo "Firewall esta desactivado"
	fi
}

function restartScript {
	stopScript
	startScript
}

function test {
	startScript
	echo -e "\e[31m!!ATENCION!!\e[0m"
	echo "ESPERAMOS 60 SEG"
	echo -e "\e[31mCOMPRUEBA QUE LOS PUERTOS ESTEN ABIERTO Y TENGAS ACCESO A SSH\e[0m"
	sleep 60
	echo -e "\e[31m!!ATENCION!!, DETENIENDO\e[0m"
	stopScript
}

function showHelp {

    echo "Usage: myOwnFirewall {start|stop|restart|test|ban IP|unban IP}"

}


function stopScript {

        if [ -f ${LOCK} ]

        then

                for i in `cat $BANNED_IPS`; do

                $IPT -F
                done

                rm ${LOCK}

                echo "!!ATENCION!!, Firewall esta desactivado"
                $IPT -F
                $IPT -X
                $IPT -Z
		$IPT -P INPUT ACCEPT
		$IPT -P FORWARD ACCEPT
		$IPT -P OUTPUT ACCEPT


        else
                echo "Firewall no esta trabajando"

        fi

}


function startScript {


        if [ -f ${LOCK} ]

        then

                echo "firewall esta ahora activado"

                exit

        else

                ` > ${LOCK}`


################### LIMPIAMOS ###################


$IPT -F

$IPT -X

$IPT -Z


################### BLOQUEAMOS PAQUETES DE ENTRADA Y PERMITIMOS LOS DE SALIDA ###################

$IPT -P INPUT DROP

$IPT -P FORWARD DROP

$IPT -P OUTPUT ACCEPT


$IPT -A INPUT -i lo -j ACCEPT


################### PERMITIR PAQUETE DE CONEXIONES ESTABLECIDAS ###################


$IPT -A INPUT -i $ETH -m state --state ESTABLISHED,RELATED -j ACCEPT


#PERMITIR ACCESO WEB A MULTICS Y PROFILES Y CACHE

$IPT -A INPUT  -i $ETH  -p tcp --match multiport --dports $MCS_P,$MCS_W,$MCS_C -j ACCEPT

#PERMITIR ACCESO CACHE A MULTICS

$IPT -A INPUT -i $ETH -p udp -m udp --dport $CACHE -j ACCEPT


#PERMITIR SSH

$IPT -A INPUT  -i $ETH -p tcp -m tcp --dport $SSH -j ACCEPT

#PERMITIR SSH A MI IP Y DENEGAR EL RESTO

#$IPT -A INPUT -i $ETH -p tcp --dport PORT -s IP -j ACCEPT # ES PELIGROSO NOS PODEMOS QUEDAR SIN ACCESO AL SERVIDOR SI TENEMOS IP DINAMICA

#$IPT -A INPUT -i $ETH -p tcp --dport PORT -j DROP # ES PELIGROSO NOS PODEMOS QUEDAR SIN ACCESO AL SERVIDOR SI TENEMOS IP DINAMICA


   ####################

##########################

## UN POCO DE SEGURIDAD ##

##########################

   ####################


#Permitir el ping, pero a 1 paquete por segundo, para evitar un ataque ICMP Flood


$IPT -A INPUT -p icmp -m state --state NEW --icmp-type echo-request -m limit --limit 1/s --limit-burst 1 -j ACCEPT

$IPT -A INPUT -p icmp --icmp-type echo-request -j DROP

$IPT -A INPUT -p icmp -j DROP


# Intenta bloquear escaneos de puertos

# Cualquiera que haya intentado escanear puertos estÃƒÂ¡ bloqueado por un dÃƒÂa entero.


$IPT -A INPUT -m recent --name portscan --rcheck --seconds 86400 -j DROP

$IPT -A FORWARD -m recent --name portscan --rcheck --seconds 86400 -j DROP


# Una vez que haya pasado el dÃƒÂa, elimÃƒÂnelos de la lista de escaneo de puertos


$IPT -A INPUT -m recent --name portscan --remove

$IPT -A FORWARD -m recent --name portscan --remove


# explicación:

# Se añade cada ip que se conecte a la tabla de recent

# Por por cada ip en la tabla de recent si hace mas de x hits en x segundos, se dropea.



### PROTECIÃƒâ€œN FUERZA-BRUTA SSH ###


$IPT -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --set

$IPT -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP

$IPT -A INPUT -p tcp --dport $SSH -m conntrack --ctstate NEW -m recent --set

$IPT -A INPUT -p tcp --dport $SSH -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP




#Cuando sube la carga


$IPT -A INPUT -p tcp --syn -j REJECT --reject-with icmp-port-unreachable


#proteccion contra flood y evitar algunos ataques ddos


$IPT -A INPUT -p tcp -m connlimit --connlimit-above 80 -j REJECT --reject-with tcp-reset

$IPT -A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT

$IPT -A INPUT -p tcp -m conntrack --ctstate NEW -j DROP

$IPT -A INPUT -f -j DROP

$IPT -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT

$IPT -A INPUT -p tcp --tcp-flags RST RST -j DROP


#Mitigando las inundaciones de SYN con SYNPROXY


$IPT -t raw -A PREROUTING -p tcp -m tcp --syn -j CT --notrack

$IPT -A INPUT -p tcp -m tcp -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --sack-perm --timestamp --wscale 7 --mss 1460

$IPT -A INPUT -m conntrack --ctstate INVALID -j DROP


#evitar ataque DDOS


$IPT -A INPUT -p tcp --tcp-flags ALL NONE -j DROP

$IPT -A INPUT -p tcp ! --syn -m state --state NEW -j DROP

$IPT -A INPUT -p tcp --tcp-flags ALL ALL -j DROP

$IPT -A FORWARD -p tcp --syn -m limit --limit 1/s -j ACCEPT

$IPT -A FORWARD -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s -j ACCEPT

$IPT -A INPUT -p tcp -m tcp --tcp-flags SYN,RST,ACK SYN -m limit --limit 1/sec -j ACCEPT


#descartar paquetes tcp q no son correctos


$IPT -N FLAG_SCAN

$IPT -F FLAG_SCAN

$IPT -A FLAG_SCAN -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP

$IPT -A FLAG_SCAN -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

$IPT -A FLAG_SCAN -p tcp --tcp-flags ALL FIN -j DROP

$IPT -A FLAG_SCAN -p tcp --tcp-flags SYN,FIN,PSH SYN,FIN,PSH -j DROP

$IPT -A FLAG_SCAN -p tcp --tcp-flags SYN,FIN,RST SYN,FIN,RST -j DROP

$IPT -A FLAG_SCAN -p tcp --tcp-flags SYN,FIN,RST,PSH SYN,FIN,RST,PSH -j DROP

$IPT -A FLAG_SCAN -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP


#proteger para null scan


$IPT -A FLAG_SCAN -p tcp --tcp-flags ALL NONE -j DROP


#proteger para xmas


$IPT -A FLAG_SCAN -p tcp --tcp-flags ALL ALL -j DROP

$IPT -A FLAG_SCAN -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP

$IPT -A FLAG_SCAN -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP


#filtrado de paquetes manipulados


$IPT -N PKT_FAKE

$IPT -F PKT_FAKE

$IPT -A PKT_FAKE -m state --state INVALID -j DROP

$IPT -A PKT_FAKE -p tcp ! --syn -m state --state NEW -j DROP

$IPT -A PKT_FAKE -j RETURN


$IPT -A PKT_FAKE -f -j DROP



### PROTECIÃƒâ€œN AL ESCANEO DE PUERTOS ###


$IPT -N port-scanning

$IPT -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN

$IPT -A port-scanning -j DROP


#La que mejor va


$IPT -N syn-flood

$IPT -A syn-flood -m limit --limit 100/second --limit-burst 150 -j RETURN

$IPT -A syn-flood -j LOG --log-prefix "SYN flood: "

$IPT -A INPUT -i $ETH:2 -p tcp --syn -j syn-flood

$IPT -A syn-flood -m limit --limit 1/s --limit-burst 4 -j RETURN

$IPT -A INPUT -i $ETH -p tcp --tcp-flags SYN,ACK,FIN,RST RST -j syn-flood

$IPT -A FORWARD -i $ETH -p tcp --tcp-flags SYN,ACK,FIN,RST RST -j syn-flood

$IPT -A syn-flood -m limit --limit 4/s --limit-burst 16 -j RETURN

$IPT -A syn-flood -m limit --limit 75/s --limit-burst 100 -j RETURN

$IPT -A syn-flood -j LOG --log-prefix "SYN FLOOD " --log-tcp-sequence --log-tcp-options --log-ip-options -m limit --limit 1/second

$IPT -A syn-flood -j DROP

                for i in `cat $BANNED_IPS`; do

                        $IPT -I INPUT -s $i -j DROP

                        $IPT -I OUTPUT -d $i -j DROP

                 done

               
 echo "Firewall esta activo"

        fi

}

function unbanIP {
	if [ -f ${LOCK} ]
	then
		if [ $# -eq 0 ]
		then
			echo "You must enter an ip address"
		else
			ip=$1
			exists=false

			for i in `cat $BANNED_IPS`; do
				if [ $i = $ip ]
				then
					exists=true
				else
					echo $i 
				fi
			done

			if [ $exists = false ]
			then
				echo "IP ${ip} doesn't in the list"
			else
				sed -i -e  "/$ip/d" $BANNED_IPS
				$IPT -D INPUT -s $ip -j DROP
				$IPT -D OUTPUT -s $ip -j DROP
				cat $BANNED_IPS | sed '/^ *$/d' > $TEMP
				mv $TEMP $BANNED_IPS
				echo "IP ${ip} unbanned"
			fi
		fi
	else
                echo "Firewall esta desactivado"
	fi
}

case "$1" in

	ban)
		banIP $2
		exit
		;;

	restart)
		restartScript
		exit
		;;

	start)
		startScript
		exit
		;;

	stop)
		stopScript
		exit
		;;

	unban)
		unbanIP $2
		exit
		;;
	test)
		test
		exit
		;;


	*)
		showHelp
		exit
		;;
esac
